@model AD_Team10.Models.RetrievalList
@using AD_Team10.DataService
@using AD_Team10.Models
@{
    ViewBag.Title = "UpdateRetrievalList";
}

@{
    List<Item> items = (List<Item>)ViewData["items"];
}

<h3 align="center">@RequisitionService.retrievalList</h3>
<p></p>
<h4 align="center">
    From @Model.StartDate.ToString("dd/MM/yyyy") to @Model.EndDate.ToString("dd/MM/yyyy")
</h4>
<p></p>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.RetrievalListID)

    <p align="right">
        <button class="btn btn-default" type="submit">@RequisitionService.save</button>
    </p>

    <div class="container">
        <table class="table">
            <tr>
                <th rowspan="2">
                    @Html.DisplayNameFor(model => model.RetrievalListDetails.First().Item.Description)
                </th>
                <th colspan="2">
                    @RequisitionService.totalQuantity
                </th>
                <th colspan="3">
                    @RequisitionService.breakDownByDep
                </th>
            </tr>
            <tr>
                <th>
                    @RequisitionService.needed
                </th>
                <th>
                    @RequisitionService.retrieved
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.RetrievalListDetails.First().Department.DepartmentName)
                </th>
                <th>
                    @RequisitionService.needed
                </th>
                <th>
                    @RequisitionService.retrieved
                </th>
            </tr>
            @foreach (var item in items)
            {
                List<RetrievalListDetail> value = Model.RetrievalListDetails.Where(x => x.ItemID == item.ItemID).ToList();
                <tr>
                    <td rowspan="@Model.RetrievalListDetails.Where(x=>x.ItemID == item.ItemID).Count()">
                        @Html.DisplayFor(x => item.Description)
                    </td>
                    <td rowspan="@Model.RetrievalListDetails.Where(x=>x.ItemID == item.ItemID).Count()">
                        @{ var quantity = Model.RetrievalListDetails.Where(m => m.ItemID == item.ItemID).Select(y => y.Quantity).Sum(); }
                        @Html.DisplayFor(x => quantity)
                    </td>
                    <td rowspan="@Model.RetrievalListDetails.Where(x=>x.ItemID == item.ItemID).Count()">
                        @{ var quantityOffered = Model.RetrievalListDetails.Where(m => m.ItemID == item.ItemID).Select(y => y.QuantityOffered).Sum(); }
                        @Html.DisplayFor(x => quantityOffered)
                    </td>

                    <td>
                        @value[0].Department.DepartmentName
                    </td>
                    <td>
                        @value[0].Quantity
                    </td>
                    <td>
                        @Html.EditorFor(model => value[0].QuantityOffered)
                        @Html.ValidationMessageFor(model => value[0].QuantityOffered, "", new { @class = "form-control" })
                    </td>
                </tr>
                for (int i = 1; i < value.Count; i++)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(x => value[i].Department.DepartmentName)
                        </td>
                        <td>
                            @Html.DisplayFor(x => value[i].Quantity)
                        </td>
                        <td>
                            @Html.EditorFor(x => value[i].QuantityOffered)
                            @Html.ValidationMessageFor(x => value[i].QuantityOffered, "", new { @class = "text-danger" })
                        </td>
                    </tr>
                }
                Model.RetrievalListDetails.AddRange(value);
            }
        </table>
    </div>
}


